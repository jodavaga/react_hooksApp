{"version":3,"sources":["components/08-useReducer/todoReducer.js","components/08-useReducer/TodoListItem.js","helpers/uppercaseFirstLetter.js","components/08-useReducer/TodoList.js","components/08-useReducer/TodoAddForm.js","hooks/useForm.js","components/08-useReducer/TodoApp.js","index.js"],"names":["todoReducer","state","action","type","payload","filter","todo","id","map","done","TodoListItem","string","index","handleComplete","handleDelete","className","onClick","desc","charAt","toUpperCase","slice","TodoList","todos","length","item","i","key","TodoAddForm","handleAddTodo","initialState","useState","values","setValues","handleInputChange","target","name","value","reset","useForm","description","onSubmit","e","preventDefault","trim","newTodo","Date","getTime","select","placeholder","autoComplete","onChange","init","JSON","parse","localStorage","getItem","TodoApp","useReducer","dispacth","useEffect","setItem","stringify","todoId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5732a7cc.chunk.js","sourcesContent":["export const todoReducer = (state = [], action) => {\r\n    \r\n    switch (action.type) {\r\n        case 'add':\r\n            return [...state, action.payload];\r\n\r\n        case 'delete':\r\n            // return and array of todos, different to deleted one\r\n            return state.filter( todo => todo.id !== action.payload); // 1595032094606\r\n\r\n        case 'toggle':\r\n            return state.map( todo => \r\n                ( todo.id === action.payload )\r\n                    ? { ...todo, done: !todo.done }\r\n                    : todo    \r\n            );\r\n            \r\n        // same as above\r\n        case 'toggle-old':\r\n            return state.map( todo => {\r\n                if ( todo.id === action.payload ) {\r\n                    // update only one prop on the todo obj\r\n                    return {\r\n                        ...todo,\r\n                        done: !todo.done\r\n                    }\r\n                }\r\n\r\n                return todo;\r\n            })\r\n    \r\n        default:\r\n            return state;\r\n            break;\r\n    }\r\n}","import React from 'react';\r\nimport { upperCaseFirstLetter } from '../../helpers/uppercaseFirstLetter';\r\n\r\nexport const TodoListItem = ( {todo, index, handleComplete, handleDelete} ) => {\r\n    return (\r\n        <div \r\n            className=\"todo-item\"\r\n        >\r\n            <p  \r\n                className={ `${ todo.done && 'complete' }` }\r\n                onClick={ () => handleComplete( todo.id ) }\r\n            >\r\n                {index+1}. { upperCaseFirstLetter(todo.desc) }\r\n            </p>\r\n            <button\r\n                className=\"btn btn-outline-danger btn-sm\"\r\n                onClick={ () => handleDelete( todo.id ) }\r\n            >\r\n                Borrar\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","\r\nexport const upperCaseFirstLetter = ( string ) => {\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { TodoListItem } from './TodoListItem';\r\n\r\nexport const TodoList = ( {todos, handleComplete, handleDelete} ) => {\r\n    return (\r\n        <>\r\n            { todos.length > 0 &&\r\n                <ul className=\"todo-list\">\r\n                    {\r\n                        todos.map( (item, i) => {\r\n                            return (\r\n                                <TodoListItem \r\n                                    key={ item.id }\r\n                                    todo={ item }\r\n                                    index={ i }\r\n                                    handleComplete={ handleComplete }                                                                                \r\n                                    handleDelete={ handleDelete }                                    \r\n                                />\r\n                            )\r\n                        })    \r\n                    }\r\n                </ul>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nTodoList.propTypes = {\r\n    todos: PropTypes.array.isRequired,\r\n    handleComplete: PropTypes.func.isRequired,\r\n    handleDelete: PropTypes.func.isRequired\r\n}\r\n","import React from 'react';\r\nimport { useForm } from '../../hooks/useForm';\r\n\r\nexport const TodoAddForm = ( { handleAddTodo } ) => {\r\n\r\n    // custom hook to manage form, input changes\r\n    const [ {description}, handleInputChange, reset] = useForm({\r\n        description: ''\r\n    });\r\n\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        // prevent add empty todo\r\n        if (description.trim().length <= 1) {\r\n            return;\r\n        }\r\n\r\n        const newTodo = {\r\n            id: new Date().getTime(),\r\n            desc: `${ description }`,\r\n            done: false\r\n        }\r\n\r\n        // call function from parent that dispatch action\r\n        handleAddTodo( newTodo );\r\n\r\n        // reset input form, using customHook function\r\n        reset();\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                name=\"description\"\r\n                className=\"form-control\"\r\n                onClick={ ({target}) => target.select()  }\r\n                placeholder=\"Add todo...\"\r\n                autoComplete=\"off\"\r\n                value={ description }\r\n                onChange={ handleInputChange }\r\n            />\r\n\r\n            <button\r\n                type=\"submit\"\r\n                className=\"btn btn-primary btn-block mt-2\"\r\n            >\r\n                Agregar\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n","import { useState } from 'react';\r\n\r\n\r\n// Manage forms using target names as a input form ref and it's values.\r\n\r\nexport const useForm = ( initialState = {} ) => {\r\n\r\n    const [values, setValues] = useState(initialState);\r\n\r\n    const handleInputChange = ({ target }) => {\r\n        setValues({\r\n            ...values,\r\n            [ target.name ]: target.value \r\n        })\r\n    }\r\n\r\n    const reset = () => {\r\n        setValues( initialState );\r\n    }\r\n\r\n    return [ values, handleInputChange, reset ];\r\n}","import React, { useReducer, useEffect } from 'react';\r\nimport { todoReducer } from './todoReducer';\r\nimport { TodoList } from './TodoList';\r\nimport { TodoAddForm } from './TodoAddForm';\r\n\r\nimport './styles.css';\r\n\r\nconst init = () => {\r\n    const initialState = [{\r\n        id: new Date().getTime(),\r\n        desc: 'Estudiar React',\r\n        done: false\r\n    }];\r\n\r\n    return JSON.parse(localStorage.getItem('todos')) || initialState;\r\n}\r\n\r\nexport const TodoApp = () => {\r\n\r\n    const [ todos, dispacth ] = useReducer(todoReducer, [], init);\r\n\r\n    // effect to save on localStorage\r\n    useEffect(() => {\r\n        localStorage.setItem('todos', JSON.stringify(todos))\r\n    }, [ todos ]);\r\n\r\n    const handleAddTodo = ( newTodo ) => {\r\n        dispacth({\r\n            type: 'add',\r\n            payload: newTodo\r\n        });\r\n    }\r\n\r\n    // delete todo using reducer\r\n    const handleDelete = ( todoId ) => {\r\n\r\n        // action to delete\r\n        const deleteAction = {\r\n            type: 'delete',\r\n            payload: todoId\r\n        }\r\n\r\n        dispacth( deleteAction );\r\n    }\r\n\r\n    const handleComplete = (todoId) => {\r\n        // dispatch\r\n        dispacth({ \r\n            type: 'toggle',\r\n            payload: todoId \r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1>Todo APP</h1>\r\n            <hr />\r\n\r\n            <div className=\"row\">\r\n\r\n                <div className=\"col-7\">\r\n                    <TodoList \r\n                        todos={ todos }\r\n                        handleComplete={ handleComplete }\r\n                        handleDelete={ handleDelete }\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-5\">\r\n                    <TodoAddForm handleAddTodo={ handleAddTodo } />\r\n                </div>\r\n\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// import { HookApp } from './HookApp';\r\n// import { CounterApp } from './components/01-useState/CounterApp';\r\n// import { CounterCustomHook } from './components/01-useState/CounterCustomHook';\r\n// import { SimpleForm } from './components/02-useEffect/SimpleForm';\r\n// import { FormWithCustomHook } from './components/02-useEffect/FormWithCustomHook';\r\n// import { MultipleCustomHooks } from './components/03-examples/MultipleCustomHooks';\r\n// import { FocusScreen } from './components/04-useRef/FocusScreen';\r\n// import { RealExampleUseRef } from './components/04-useRef/RealExampleUseRef';\r\n// import { LayoutEffect } from './components/05-useLayoutEffect/LayoutEffect';\r\n// import { Memorized } from './components/06-memos/Memorized';\r\n// import { MemoHook } from './components/06-memos/MemoHook';\r\n// import { CallbackHook } from './components/06-memos/CallbackHook';\r\n// import { Padre } from './components/07-tarea-memo/Padre';\r\n// import './components/08-useReducer/intro-reducer';\r\nimport { TodoApp } from './components/08-useReducer/TodoApp';\r\n\r\nReactDOM.render(\r\n    // <CounterApp />,\r\n    <TodoApp />,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}